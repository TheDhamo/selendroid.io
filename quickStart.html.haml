---
layout: base
title: Quick Start
author: Dominik Dary
---
.container-fluid
  .row-fluid
    .span3
      #sidebar
        %ul.nav.nav-tabs.nav-stacked
          %li
            %a{:href=>'#beforeStart'} Before you start
          %li
            %a{:href=>'#withMaven'} Use Selendroid with Maven
          %li
            %a{:href=>'#nativeAppTest'} Native App Test
          %li
            %a{:href=>'#hybridAppTest'} Hybrid App Test
          %li
            %a{:href=>'#mobileWebTest'} Testing the mobile Web
          %li
            %a{:href=>'#usingOtherClientBindings'} Writing Tests in other languages
    .span9
      %script{ :type=>'text/javascript', :src=>'./javascripts/github-files.js' }
      %h1 Quick Start
      %p This page demonstrates about how to get started with the demo project for testing native and hybrid apps and the mobile web. The demo project is located at Github: <a href="https://github.com/selendroid/demoproject-selendroid">https://github.com/selendroid/demoproject-selendroid</a>

      %h2#beforeStart Before you start
      %p To get started please <a href="#{site.setup_page}#systemRequirements">setup first your system</a> and if you want to use an emulator during test, please checkout <a href="#{site.setup_page}#androidDevices">this section</a>.

      %h2#withMaven Use Selendroid with Maven
      %p The demo project is based on <a href="http://maven.apache.org/">Apache Maven</a> and uses <a href="http://testng.org/">TestNG</a> to run the tests.

      %p Selendroid is available in Maven central can be added in the dependency section of the <code>pom.xml</code>:
      %pre
        %code.xml
          = preserve do
            :escaped
              <dependency>
                  <groupId>io.selendroid</groupId>
                  <version>#{site.current_version}</version>
                  <artifactId>selendroid-standalone</artifactId>
              </dependency>
              <dependency>
                  <groupId>io.selendroid</groupId>
                  <version>#{site.current_version}</version>
                  <artifactId>selendroid-client</artifactId>
              </dependency>

      %p Before starting <code>SelendroidDriver</code> it is mandatory to start the <code>SelendroidStandalone</code>-server. This can be done by
      %ul
        %li using the command line or
        %li code in the test case

      %h3 Command line start of selendroid-standalone
      %p Go through Selendroid's <a href="#{site.setup_page}">setup instructions</a> and download the current version. The applications that are we are using in the demo project are located in <a href="https://github.com/selendroid/demoproject-selendroid/tree/master/src/main/resources">this folder</a>.

      %p To start the standalone server please open your prefered shell and run:
      %code java -jar selendroid-standalone-0.8.0-with-dependencies.jar -aut EmployeeDirectory.apk -aut selendroid-test-app-0.8.0.apk

      %p When the server is started you can verify the current configuration <a href="http://localhost:5555/wd/hub/status">http://localhost:5555/wd/hub/status</a>:

      %pre
        %code.json
          = preserve do
            :escaped
              "supportedApps":[
                  {
                      "appId":"io.selendroid.directory:0.0.1",
                      "mainActivity":"io.selendroid.directory.EmployeeDirectory",
                      "basePackage":"io.selendroid.directory"},
                  {
                      "appId":"io.selendroid.testapp:#{site.current_version}",
                      "mainActivity":"io.selendroid.testapp.HomeScreenActivity",
                      "basePackage":"io.selendroid.testapp"
                  }
              ]

      %h3 Start selendroid-standalone during test
      %p Before the test is executed the selendroid-standalone server will be started:

      %pre
        %code.java
          = preserve do
            :escaped
              SelendroidConfiguration config = new SelendroidConfiguration();
              // Add the selendroid-test-app to the standalone server
              config.addSupportedApp("src/main/resources/selendroid-test-app-#{site.current_version}.apk");
              selendroidServer = new SelendroidLauncher(config);
              selendroidServer.lauchSelendroid();

      %p The test itself you find find [here](https://github.com/selendroid/demoproject-selendroid/blob/master/src/main/java/io/selendroid/demo/SelendroidIntegrationTest.java#L45).



      %h2 Tests

      %p After the <code>selendroid-standalone</code> has been started, the <code>SelendroidDriver</code> can be initialized:

      %pre
        %code.java
          = preserve do
            :escaped
              // Create the selendroid capabilities and specify to use an emulator and selendroid's test app
              SelendroidCapabilities caps = SelendroidCapabilities.emulator("io.selendroid.testapp:#{site.current_version}");
              driver = new SelendroidDriver("http://localhost:5555/wd/hub", caps);


      %p The capabilities are describing what app is used for testing and in this example the selendroid test app is used.

      %h2 Simple Tests

      %p For testing the Android app the <a href="http://docs.seleniumhq.org/docs/03_webdriver.jsp">WebDriver API</a> is used. This demonstrates about how a text field can be found and text can be entered.

      %pre
        %code.java
          = preserve do
            :escaped
              // Find an element by id
              WebElement inputField = driver.findElement(By.id("my_text_field"));
              //enter a text into the text field
              inputField.sendKeys("Selendroid");
              //check if the text has been entered into the text field
              Assert.assertEquals("Selendroid", inputField.getText());

      %h2#nativeAppTest Native App Test

      %p Selendroid's <a href="https://github.com/selendroid/demoproject-selendroid/blob/master/src/main/resources/selendroid-test-app-0.5.1.apk">test app</a> contains an user registration flow that will be tested in the <a href="https://github.com/selendroid/demoproject-selendroid/blob/master/src/main/java/io/selendroid/demo/nativeui/UserRegistrationTest.java">UserRegistrationTest</a>:
      %pre
        %code#nativeCode.java
          = preserve do
            :escaped
      %script
        $.getGithubFile("selendroid", "demoproject-selendroid", "0085ebef222210fe9775b9b7af1eae7b0de510cd", function(contents) {$('#nativeCode').html(contents);},14);
      %p The test demonstrates how activities can be started and how the interaction with different elements can be done.

      %h2#hybridAppTest Hybrid App Test
      %p Selendroid can be used to test hybrid applications. The project contains a <a href="https://github.com/selendroid/demoproject-selendroid/blob/master/src/main/resources/employee-directory.apk">Cordova sample app</a> and the <a href="https://github.com/selendroid/demoproject-selendroid/blob/master/src/main/java/io/selendroid/demo/webui/EmployeeDirectoryTest.java">EmployeeDirectoryTest</a>:
      %pre
        %code#hybridCode.java
          = preserve do
            :escaped
      %script
        $.getGithubFile("selendroid", "demoproject-selendroid", "3d7364c95c22f0c82bef7d0f21df4126144d829f", function(contents) {$('#hybridCode').html(contents);},14);

      %h2#mobileWebTest Testing the mobile Web
      %p Selendroid supports with version 0.7.0 testing the mobile web. The sample project contains a <a href="http://goo.gl/2iLiKj">MobileWebTest</a> example:
      %pre
        %code#mobileWebCode.java
          = preserve do
            :escaped
      %script
        $.getGithubFile("selendroid", "demoproject-selendroid", "3ebeea7b711954646ce1d66a256df208ccf332c0", function(contents) {$('#mobileWebCode').html(contents);},14);

      %h2#usingOtherClientBindings Writing Tests in other languages
      %p Tests can be written in every programming language a Selenium client binding is available. A simple JUnit based python tests you can find <a href="https://github.com/selendroid/demoproject-selendroid/blob/master/src/main/python/FindElementTest.py">here</a>:
      %pre
        %code#pythonSampleCode.python
          = preserve do
            :escaped
      %script
        $.getGithubFile("selendroid", "demoproject-selendroid", "86fb04958b265b624ddbe43bb27fb2d638274c7e", function(contents) {$('#pythonSampleCode').html(contents);},4);
